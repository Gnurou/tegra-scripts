#!/usr/bin/env bash

set -e

. scripts/env.sh

sudo_write()
{
    echo $1 |sudo tee $2 >/dev/null
}

# Run a command into the chrooted target FS using qemu, by adding a binfmt_misc
run_in_qemu()
{
    # Do we have binfmt_misc support?
    if [ ! -f /proc/sys/fs/binfmt_misc/status ]; then
        # Nope, try to mount it maybe?
        sudo mount binfmt_misc -t binfmt_misc /proc/sys/fs/binfmt_misc
        if [ ! -f /proc/sys/fs/binfmt_misc/status ]; then
            error "This script requires binfmt_misc support to run ARM binaries under qemu"
        fi
    fi
    # Save current active status and enable
    local curstatus=0
    if [ $(cat /proc/sys/fs/binfmt_misc/status) = "enabled" ]; then
        curstatus=1
    fi
    sudo_write 1 /proc/sys/fs/binfmt_misc/status
    # Add new rule to run ARM binaries using our installed qemu
    if [ ! -f /proc/sys/fs/binfmt_misc/arm-qemu-build-rootfs-tmp ]; then
        sudo_write ':arm-qemu-build-rootfs-tmp:M::\x7fELF\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x28\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff:/usr/bin/qemu-arm-static:' /proc/sys/fs/binfmt_misc/register
    fi
    # Run the command
    sudo chroot $SYSROOT /usr/bin/env -i PATH="/sbin:/usr/sbin:/bin:/usr/bin" TERM="$TERM" $*
    # Remove rule, restore status
    sudo_write -1 /proc/sys/fs/binfmt_misc/arm-qemu-build-rootfs-tmp
    sudo_write $curstatus /proc/sys/fs/binfmt_misc/status
}

if [ ! -e $SYSROOT ]; then
    error "Directory $SYSROOT does not exist. Either link to your $DISTRO root FS, or run ./scripts/download-rootfs to download a fresh image."
    exit 1
fi

if [ ! -f "$SYSROOT/usr/bin/qemu-arm-static" ]; then
    status "Installing qemu-arm-static binary into target FS..."
    QEMUDEB=$(mktemp)
    wget http://snapshot.debian.org/archive/debian/20141030T220503Z/pool/main/q/qemu/qemu-user-static_2.1%2Bdfsg-5%2Bb1_i386.deb -O $QEMUDEB
    ${CROSS_COMPILE}ar p $QEMUDEB data.tar.xz|sudo tar xJf - -C $SYSROOT ./usr/bin/qemu-arm-static
    rm -f $QEMUDEB
fi

sudo mkdir -p $SYSROOT/opt/nouveau
sudo chown -R $USER $SYSROOT/opt/nouveau

# Fix target's resolv.conf so we can download packages
if [ ! -f "$SYSROOT/etc/resolv.conf.rootfs-nvbackup" ]; then
    sudo mv $SYSROOT/etc/resolv.conf $SYSROOT/etc/resolv.conf.rootfs-nvbackup
fi
sudo cp /etc/resolv.conf $SYSROOT/etc/resolv.conf

. scripts/distro/prepare-$DISTRO

# Restore target's resolv.conf now that packages are installed"
sudo rm -f $SYSROOT/etc/resolv.conf
sudo mv $SYSROOT/etc/resolv.conf.rootfs-nvbackup $SYSROOT/etc/resolv.conf

if [ ! -d $SYSROOT/$NV_PREFIX ]; then
    status "Creating $NV_PREFIX"
    sudo mkdir $SYSROOT/$NV_PREFIX
    sudo chown -R $USER $SYSROOT/$NV_PREFIX
fi

status "Fixing permissions in /boot, /lib/modules and /lib/firmware"
sudo mkdir -p $SYSROOT/boot
sudo chown -R $USER $SYSROOT/boot
sudo mkdir -p $SYSROOT/lib/modules
sudo chown -R $USER $SYSROOT/lib/modules
sudo mkdir -p $SYSROOT/lib/firmware
sudo chown -R $USER $SYSROOT/lib/firmware

status "Adding environment to /etc/profile.d/nouveau.sh"
cat <<EOF |sudo tee $SYSROOT/etc/profile.d/nouveau.sh >/dev/null
NV_PREFIX="$NV_PREFIX"
export PATH="\$NV_PREFIX/bin:\$PATH"
export LD_LIBRARY_PATH="\$NV_PREFIX/lib:\$LD_LIBRARY_PATH"
export PKG_CONFIG_PATH="\$NV_PREFIX/lib/pkgconfig:\$PKG_CONFIG_PATH"
EOF

status "Adding ld.so.conf.d entry for $NV_PREFIX/lib"
cat <<EOF |sudo tee $SYSROOT/etc/ld.so.conf.d/nouveau.conf >/dev/null
$NV_PREFIX/lib
EOF

status "Target FS ready to compile the open graphics stack!"
